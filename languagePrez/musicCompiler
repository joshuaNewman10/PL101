var endTime = function(time,expr) { 
  var duration = time;
    if(expr.tag==='par' || expr.tag==='note') return recurs(expr);
    recurs(expr);
    function recurs(tree) {
        if(tree.tag === 'note' || tree.tag === 'rest') {
            return tree.dur; //doesnt handle time itself

        } else if(tree.tag ==='par'){
          var leftDuration = tree.left ?  recurs(tree.left) : 0;
          var rightDuration = tree.right ? recurs(tree.right) : 0;
          return Math.max(leftDuration,rightDuration); //doesnt handle time itself

        } else if(tree.tag === 'repeat') {
          var repetitionTime = 0;
          var numberOfRepetitions = tree.count;
          while((numberOfRepetitions--) > 0) {
            repetitionTime += tree.section.left ? recurs(tree.section.left) : 0;
            repetitionTime += tree.section.right ? recurs(tree.section.right) : 0;
          }
          duration += repetitionTime;
          return 0; //handles time itself
        } else {
          
          var leftTime = tree.left ? recurs(tree.left) : 0;
          var rightTime = tree.right ? recurs(tree.right) : 0;
          
          duration += leftTime;
          duration += rightTime;
          return 0; //handles time itself
        }     
    }
   return duration;
};

function compile(musExpr) {
    var output = [];
    var curTime = 0;
    var chordEndTime = 0;
    var isChord = false; 
    recurs(musExpr);
    function recurs(tree) {
      if(tree.tag==='note') {
          output.push({tag:'note',pitch:tree.pitch,
                    start:curTime,dur:tree.dur});
        if(!isChord) {
          curTime +=tree.dur;
        }
      } else if(tree.tag==='repeat') {
          var numReps = tree.count;
          while((numReps--) > 0) {
            recurs(tree.section.left);
            recurs(tree.section.right);
          }
        
      } else if(tree.tag==='rest') {
          output.push({tag:'rest',pitch:null,start:curTime,dur:tree.dur});
          curTime +=tree.dur;
      } else if (tree.tag==='par') {
          isChord = true;
          chordEndTime = endTime(curTime,tree);
          recurs(tree.left);
          recurs(tree.right);
          curTime = chordEndTime;
          isChord = false;
      } else {
          recurs(tree.left);
          recurs(tree.right);
     }
    }
    return output;
}

function convertPitch(pitch) {
  var dict = {a:9,b:11,c:0,d:2,e:4,f:5,g:7};
  
  pitch = pitch.split('');
  octave = pitch[1];
  note = pitch[0];
  var midNum = 12 + 12 * octave + dict[note];
  return midNum;
}

function toMIDI(compiledNote) {
   return compiledNote.map(function(note,i,collect){
    if(note.tag=='rest') return note;
    var tempNote = {tag:'note',midiNote:convertPitch(note.pitch),start:note.start,dur:note.dur};
    return tempNote;
   });
}
/*
  Test
*/
var melody_mus = 
    { tag: 'seq',
      left: 
     { tag: 'repeat', count:2, section: {
         left: { tag: 'note', pitch: 'a4', dur: 250 },
         right: { tag: 'seq', 
               left:{tag: 'note', pitch: 'c4', dur: 500},
               right:{tag: 'note', pitch: 'd4', dur: 500},}
     }
     },
      right:
       { tag: 'par',
         left: { tag: 'note', pitch: 'c5', dur: 500 },
        right: { tag: 'note', pitch: 'd5', dur: 500 } }  };

console.log((compile(melody_mus)));